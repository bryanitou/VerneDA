% Pass ijk to Keplerian elements
[a,ecc,incl,RAAN,argp,nu,truelon,arglat,lonper] = ijk2keplerian(state_dim(1:3)*1000, state_dim(4:6)*1000);

mission.StartDate = datetime(2019, 1, 4, 12, 0, 0);
mission.Duration  = hours(tf / 3600);

mission.Satellite.SemiMajorAxis  = a; % meters
mission.Satellite.Eccentricity   = ecc;
mission.Satellite.Inclination    = incl;    % deg
mission.Satellite.RAAN           = RAAN;    % deg
mission.Satellite.ArgOfPeriapsis = argp;    % deg
mission.Satellite.TrueAnomaly    = nu;   % deg

mission.mdl = "real_model";
open_system(mission.mdl);
% snapshotModel(mission.mdl);

mission.Satellite.blk = mission.mdl + "/Kepler Orbit Propagator";


set_param(mission.Satellite.blk, ...
    "startDate",      num2str(juliandate(mission.StartDate)), ...
    "stateFormatNum", "Orbital elements", ...
    "orbitType",      "Keplerian", ...
    "semiMajorAxis",  "mission.Satellite.SemiMajorAxis", ...
    "eccentricity",   "mission.Satellite.Eccentricity", ...
    "inclination",    "mission.Satellite.Inclination", ...
    "raan",           "mission.Satellite.RAAN", ...
    "argPeriapsis",   "mission.Satellite.ArgOfPeriapsis", ...
    "trueAnomaly",    "mission.Satellite.TrueAnomaly");

set_param(mission.Satellite.blk, ...
    "centralBody",  "Earth", ...
    "outportFrame", "Fixed-frame");

set_param(mission.Satellite.blk, ...
    "propagator",   "Kepler (unperturbed)", ...
    "gravityModel", "Point-mass", ... % Spherical harmonics
    "eopFile",      "aeroiersdata.mat"); % EOP data file
    % "earthSH",      "EGM2008", ... % Earth spherical harmonic potential model
    % "shDegree",     "120", ... % Spherical harmonic model degree and order
    % "useEOPs",      "on", ... % Use EOP's in ECI to ECEF transformations


set_param(mission.mdl, ...
    "SolverType", "Variable-step", ...
    "SolverName", "VariableStepAuto", ...
    "RelTol",     "1e-6", ...
    "AbsTol",     "1e-7", ...
    "StopTime",   string(seconds(mission.Duration)));

set_param(mission.mdl, ...
    "SaveOutput", "on", ...
    "OutputSaveName", "yout", ...
    "SaveFormat", "Dataset");

mission.SimOutput = sim(mission.mdl);

mission.Satellite.TimeseriesPosECEF = mission.SimOutput.yout{1}.Values;
mission.Satellite.TimeseriesVelECEF = mission.SimOutput.yout{2}.Values;

mission.Satellite.TimeseriesPosECEF.TimeInfo.StartDate = mission.StartDate;
mission.Satellite.TimeseriesVelECEF.TimeInfo.StartDate = mission.StartDate;

mission.Satellite.TimeseriesPosECEF.Data(end, 1:3)
